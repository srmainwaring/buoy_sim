cmake_minimum_required(VERSION 3.10.2 FATAL_ERROR)

project(WaveBodyInteractions)

find_package(gz-cmake3 REQUIRED)

# macOS installs eigen 3.4 so relax minor version
find_package (Eigen3 3 REQUIRED NO_MODULE)

set(Boost_USE_STATIC_LIBS OFF)
set(Boost_USE_MULTITHREADED ON)
set(Boost_USE_STATIC_RUNTIME OFF)
find_package(Boost 1.71.0 COMPONENTS system iostreams filesystem) 


#set(CMAKE_CXX_FLAGS "-O3 -Wall -Wextra")

find_package(gz-plugin2 REQUIRED COMPONENTS register)
set(GZ_PLUGIN_VER ${gz-plugin2_VERSION_MAJOR})
find_package(gz-sim7 REQUIRED)

add_executable(Test_IncidentWave_Peters  Test_IncidentWave_Peters.cpp LinearIncidentWave.cpp)
target_link_libraries (Test_IncidentWave_Peters Eigen3::Eigen)
target_include_directories(Test_IncidentWave_Peters PRIVATE ${Eigen3_INCLUDE_DIRS})
set_property(TARGET Test_IncidentWave_Peters PROPERTY CXX_STANDARD 17)

add_executable(Test_IncidentWave  Test_IncidentWave.cpp LinearIncidentWave.cpp)
target_link_libraries (Test_IncidentWave Eigen3::Eigen)
target_include_directories(Test_IncidentWave PRIVATE ${Eigen3_INCLUDE_DIRS})
set_property(TARGET Test_IncidentWave PROPERTY CXX_STANDARD 17)

add_executable(Test_FS_Hydrodynamics Test_FS_Hydrodynamics.cpp FS_Hydrodynamics.cpp LinearIncidentWave.cpp)
target_include_directories(Test_FS_Hydrodynamics PRIVATE ${Eigen3_INCLUDE_DIRS})
target_link_libraries (Test_FS_Hydrodynamics Eigen3::Eigen Boost::system Boost::iostreams Boost::filesystem)
set_property(TARGET Test_FS_Hydrodynamics PROPERTY CXX_STANDARD 17)

add_library(WaveBodyInteractions SHARED
  WaveBodyInteractions.cpp
  FS_Hydrodynamics.cpp
  LinearIncidentWave.cpp
)
target_link_libraries(WaveBodyInteractions
  PRIVATE gz-plugin${GZ_PLUGIN_VER}::gz-plugin${GZ_PLUGIN_VER}
  PRIVATE gz-sim7::gz-sim7
  Eigen3::Eigen
)
set_property(TARGET WaveBodyInteractions PROPERTY CXX_STANDARD 17)
ament_target_dependencies(WaveBodyInteractions
  gnuplot_iostream
)

# Install rules
install(TARGETS ${PROJECT_NAME}
  EXPORT export_${PROJECT_NAME}
  ARCHIVE DESTINATION lib
  LIBRARY DESTINATION lib
  RUNTIME DESTINATION bin
)

# Install plugins
install(TARGETS
  WaveBodyInteractions
  DESTINATION lib/${PROJECT_NAME}
)

# Install executables
install(TARGETS
  Test_IncidentWave_Peters
  Test_IncidentWave
  Test_FS_Hydrodynamics
  DESTINATION lib/${PROJECT_NAME}
)

# TODO: disable as doxygen reporting errors
# find_package(Doxygen)
# option(BUILD_DOCUMENTATION "Create and install the HTML based API
# documentation (requires Doxygen)" ${DOXYGEN_FOUND})

# if (DOXYGEN_FOUND)
#     # set input and output files
#     set(DOXYGEN_IN ${CMAKE_CURRENT_SOURCE_DIR}/Doxyfile.in)
#     set(DOXYGEN_OUT ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile)

#     # request to configure the file
#     configure_file(${DOXYGEN_IN} ${DOXYGEN_OUT} @ONLY)
#     message("Doxygen build started")

#     # note the option ALL which allows to build the docs together with the application
#     add_custom_target( docs ALL
#         COMMAND ${DOXYGEN_EXECUTABLE} ${DOXYGEN_OUT}
#         WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
#         COMMENT "Generating API documentation with Doxygen"
#         VERBATIM )
# else (DOXYGEN_FOUND)
#   message("Doxygen need to be installed to generate the doxygen documentation")
# endif (DOXYGEN_FOUND)

