cmake_minimum_required(VERSION 3.10.2 FATAL_ERROR)

project(WaveBodyInteractions)

find_package(ignition-cmake2 REQUIRED)
find_package(Eigen3 3.3 REQUIRED NO_MODULE)

set(Boost_USE_STATIC_LIBS OFF)
set(Boost_USE_MULTITHREADED ON)
set(Boost_USE_STATIC_RUNTIME OFF)
set(Boost_INCLUDEDIR "/usr/include") # This didn't work, cmake insisted on using the non-existent /include directory,
  # so I sym-linked /include to /usr/include and it worked, bad solution...
find_package(Boost 1.71.0 COMPONENTS system iostreams filesystem)


#set(CMAKE_CXX_FLAGS "-O3 -Wall -Wextra")

find_package(ignition-plugin1 REQUIRED COMPONENTS register)
set(IGN_PLUGIN_VER ${ignition-plugin1_VERSION_MAJOR})
find_package(ignition-gazebo6 REQUIRED)

add_executable(Test_IncidentWave  Test_IncidentWave.cpp LinearIncidentWave.cpp)
target_link_libraries(Test_IncidentWave Eigen3::Eigen Boost::system Boost::iostreams Boost::filesystem)
set_property(TARGET Test_IncidentWave PROPERTY CXX_STANDARD 17)

add_executable(Test_FS_Hydrodynamics Test_FS_Hydrodynamics.cpp FS_Hydrodynamics.cpp LinearIncidentWave.cpp interp1d.cpp)
target_link_libraries(Test_FS_Hydrodynamics Eigen3::Eigen Boost::system Boost::iostreams Boost::filesystem)
set_property(TARGET Test_FS_Hydrodynamics PROPERTY CXX_STANDARD 17)

add_library(WaveBodyInteractions SHARED WaveBodyInteractions.cpp FS_Hydrodynamics.cpp LinearIncidentWave.cpp)
#add_library(WaveBodyInteractions SHARED WaveBodyInteractions.cpp)
#target_include_directories(WaveBodyInteractions PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/include)
set_property(TARGET WaveBodyInteractions PROPERTY CXX_STANDARD 17)
target_link_libraries(WaveBodyInteractions
  PRIVATE ignition-plugin${IGN_PLUGIN_VER}::ignition-plugin${IGN_PLUGIN_VER}
  PRIVATE ignition-gazebo6::ignition-gazebo6)


#install(TARGETS WaveBodyInteractions DESTINATION ~/.ignition/gazebo/plugins)
#install(TARGETS WaveBodyInteractions DESTINATION ${IGN_GAZEBO_SYSTEM_PLUGIN_PATH})
install(TARGETS WaveBodyInteractions DESTINATION /home/hamilton/buoy_ws/install/buoy_gazebo/lib)


find_package(Doxygen)
option(BUILD_DOCUMENTATION "Create and install the HTML based API documentation (requires Doxygen)" ${DOXYGEN_FOUND})

if(DOXYGEN_FOUND)
    # set input and output files
    set(DOXYGEN_IN ${CMAKE_CURRENT_SOURCE_DIR}/Doxyfile.in)
    set(DOXYGEN_OUT ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile)

    # request to configure the file
    configure_file(${DOXYGEN_IN} ${DOXYGEN_OUT} @ONLY)
    message("Doxygen build started")

    # note the option ALL which allows to build the docs together with the application
    add_custom_target( docs ALL
        COMMAND ${DOXYGEN_EXECUTABLE} ${DOXYGEN_OUT}
        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
        COMMENT "Generating API documentation with Doxygen"
        VERBATIM )
else()
  message("Doxygen need to be installed to generate the doxygen documentation")
endif()

